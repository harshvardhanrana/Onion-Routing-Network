// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/routing.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnionRoutingServer_GreetServer_FullMethodName        = "/onion_routing.OnionRoutingServer/GreetServer"
	OnionRoutingServer_CalculateFibonacci_FullMethodName = "/onion_routing.OnionRoutingServer/CalculateFibonacci"
	OnionRoutingServer_GetRandomNumbers_FullMethodName   = "/onion_routing.OnionRoutingServer/GetRandomNumbers"
)

// OnionRoutingServerClient is the client API for OnionRoutingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnionRoutingServerClient interface {
	GreetServer(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	CalculateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error)
	GetRandomNumbers(ctx context.Context, in *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error)
}

type onionRoutingServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOnionRoutingServerClient(cc grpc.ClientConnInterface) OnionRoutingServerClient {
	return &onionRoutingServerClient{cc}
}

func (c *onionRoutingServerClient) GreetServer(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, OnionRoutingServer_GreetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onionRoutingServerClient) CalculateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FibonacciResponse)
	err := c.cc.Invoke(ctx, OnionRoutingServer_CalculateFibonacci_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onionRoutingServerClient) GetRandomNumbers(ctx context.Context, in *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomResponse)
	err := c.cc.Invoke(ctx, OnionRoutingServer_GetRandomNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnionRoutingServerServer is the server API for OnionRoutingServer service.
// All implementations must embed UnimplementedOnionRoutingServerServer
// for forward compatibility.
type OnionRoutingServerServer interface {
	GreetServer(context.Context, *GreetRequest) (*GreetResponse, error)
	CalculateFibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error)
	GetRandomNumbers(context.Context, *GetRandomRequest) (*GetRandomResponse, error)
	mustEmbedUnimplementedOnionRoutingServerServer()
}

// UnimplementedOnionRoutingServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnionRoutingServerServer struct{}

func (UnimplementedOnionRoutingServerServer) GreetServer(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetServer not implemented")
}
func (UnimplementedOnionRoutingServerServer) CalculateFibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFibonacci not implemented")
}
func (UnimplementedOnionRoutingServerServer) GetRandomNumbers(context.Context, *GetRandomRequest) (*GetRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomNumbers not implemented")
}
func (UnimplementedOnionRoutingServerServer) mustEmbedUnimplementedOnionRoutingServerServer() {}
func (UnimplementedOnionRoutingServerServer) testEmbeddedByValue()                            {}

// UnsafeOnionRoutingServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnionRoutingServerServer will
// result in compilation errors.
type UnsafeOnionRoutingServerServer interface {
	mustEmbedUnimplementedOnionRoutingServerServer()
}

func RegisterOnionRoutingServerServer(s grpc.ServiceRegistrar, srv OnionRoutingServerServer) {
	// If the following call pancis, it indicates UnimplementedOnionRoutingServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnionRoutingServer_ServiceDesc, srv)
}

func _OnionRoutingServer_GreetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnionRoutingServerServer).GreetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnionRoutingServer_GreetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnionRoutingServerServer).GreetServer(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnionRoutingServer_CalculateFibonacci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnionRoutingServerServer).CalculateFibonacci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnionRoutingServer_CalculateFibonacci_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnionRoutingServerServer).CalculateFibonacci(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnionRoutingServer_GetRandomNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnionRoutingServerServer).GetRandomNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnionRoutingServer_GetRandomNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnionRoutingServerServer).GetRandomNumbers(ctx, req.(*GetRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnionRoutingServer_ServiceDesc is the grpc.ServiceDesc for OnionRoutingServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnionRoutingServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onion_routing.OnionRoutingServer",
	HandlerType: (*OnionRoutingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetServer",
			Handler:    _OnionRoutingServer_GreetServer_Handler,
		},
		{
			MethodName: "CalculateFibonacci",
			Handler:    _OnionRoutingServer_CalculateFibonacci_Handler,
		},
		{
			MethodName: "GetRandomNumbers",
			Handler:    _OnionRoutingServer_GetRandomNumbers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/routing.proto",
}

const (
	RelayNodeServer_RelayNodeRPC_FullMethodName = "/onion_routing.RelayNodeServer/RelayNodeRPC"
)

// RelayNodeServerClient is the client API for RelayNodeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayNodeServerClient interface {
	RelayNodeRPC(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error)
}

type relayNodeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayNodeServerClient(cc grpc.ClientConnInterface) RelayNodeServerClient {
	return &relayNodeServerClient{cc}
}

func (c *relayNodeServerClient) RelayNodeRPC(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelayResponse)
	err := c.cc.Invoke(ctx, RelayNodeServer_RelayNodeRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayNodeServerServer is the server API for RelayNodeServer service.
// All implementations must embed UnimplementedRelayNodeServerServer
// for forward compatibility.
type RelayNodeServerServer interface {
	RelayNodeRPC(context.Context, *RelayRequest) (*RelayResponse, error)
	mustEmbedUnimplementedRelayNodeServerServer()
}

// UnimplementedRelayNodeServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelayNodeServerServer struct{}

func (UnimplementedRelayNodeServerServer) RelayNodeRPC(context.Context, *RelayRequest) (*RelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayNodeRPC not implemented")
}
func (UnimplementedRelayNodeServerServer) mustEmbedUnimplementedRelayNodeServerServer() {}
func (UnimplementedRelayNodeServerServer) testEmbeddedByValue()                         {}

// UnsafeRelayNodeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayNodeServerServer will
// result in compilation errors.
type UnsafeRelayNodeServerServer interface {
	mustEmbedUnimplementedRelayNodeServerServer()
}

func RegisterRelayNodeServerServer(s grpc.ServiceRegistrar, srv RelayNodeServerServer) {
	// If the following call pancis, it indicates UnimplementedRelayNodeServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelayNodeServer_ServiceDesc, srv)
}

func _RelayNodeServer_RelayNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayNodeServerServer).RelayNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayNodeServer_RelayNodeRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayNodeServerServer).RelayNodeRPC(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayNodeServer_ServiceDesc is the grpc.ServiceDesc for RelayNodeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayNodeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onion_routing.RelayNodeServer",
	HandlerType: (*RelayNodeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayNodeRPC",
			Handler:    _RelayNodeServer_RelayNodeRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/routing.proto",
}
