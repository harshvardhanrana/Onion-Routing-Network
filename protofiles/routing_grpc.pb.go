// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/routing.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_TestRPC_FullMethodName  = "/onion_routing.TestService/TestRPC"
	TestService_Test1RPC_FullMethodName = "/onion_routing.TestService/Test1RPC"
	TestService_Test2RPC_FullMethodName = "/onion_routing.TestService/Test2RPC"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestRPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	Test1RPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	Test2RPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestRPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, TestService_TestRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Test1RPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, TestService_Test1RPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Test2RPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, TestService_Test2RPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
type TestServiceServer interface {
	TestRPC(context.Context, *DummyRequest) (*DummyResponse, error)
	Test1RPC(context.Context, *DummyRequest) (*DummyResponse, error)
	Test2RPC(context.Context, *DummyRequest) (*DummyResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) TestRPC(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRPC not implemented")
}
func (UnimplementedTestServiceServer) Test1RPC(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test1RPC not implemented")
}
func (UnimplementedTestServiceServer) Test2RPC(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test2RPC not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_TestRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestRPC(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Test1RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Test1RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Test1RPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Test1RPC(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Test2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Test2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Test2RPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Test2RPC(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onion_routing.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRPC",
			Handler:    _TestService_TestRPC_Handler,
		},
		{
			MethodName: "Test1RPC",
			Handler:    _TestService_Test1RPC_Handler,
		},
		{
			MethodName: "Test2RPC",
			Handler:    _TestService_Test2RPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/routing.proto",
}

const (
	RelayNodeServer_RelayNodeRPC_FullMethodName = "/onion_routing.RelayNodeServer/RelayNodeRPC"
)

// RelayNodeServerClient is the client API for RelayNodeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayNodeServerClient interface {
	RelayNodeRPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
}

type relayNodeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayNodeServerClient(cc grpc.ClientConnInterface) RelayNodeServerClient {
	return &relayNodeServerClient{cc}
}

func (c *relayNodeServerClient) RelayNodeRPC(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, RelayNodeServer_RelayNodeRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayNodeServerServer is the server API for RelayNodeServer service.
// All implementations must embed UnimplementedRelayNodeServerServer
// for forward compatibility.
type RelayNodeServerServer interface {
	RelayNodeRPC(context.Context, *DummyRequest) (*DummyResponse, error)
	mustEmbedUnimplementedRelayNodeServerServer()
}

// UnimplementedRelayNodeServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelayNodeServerServer struct{}

func (UnimplementedRelayNodeServerServer) RelayNodeRPC(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayNodeRPC not implemented")
}
func (UnimplementedRelayNodeServerServer) mustEmbedUnimplementedRelayNodeServerServer() {}
func (UnimplementedRelayNodeServerServer) testEmbeddedByValue()                         {}

// UnsafeRelayNodeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayNodeServerServer will
// result in compilation errors.
type UnsafeRelayNodeServerServer interface {
	mustEmbedUnimplementedRelayNodeServerServer()
}

func RegisterRelayNodeServerServer(s grpc.ServiceRegistrar, srv RelayNodeServerServer) {
	// If the following call pancis, it indicates UnimplementedRelayNodeServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelayNodeServer_ServiceDesc, srv)
}

func _RelayNodeServer_RelayNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayNodeServerServer).RelayNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayNodeServer_RelayNodeRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayNodeServerServer).RelayNodeRPC(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayNodeServer_ServiceDesc is the grpc.ServiceDesc for RelayNodeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayNodeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onion_routing.RelayNodeServer",
	HandlerType: (*RelayNodeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayNodeRPC",
			Handler:    _RelayNodeServer_RelayNodeRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/routing.proto",
}
